// 5.4?
// chunk = { block }
// block = { stat* ~ retstat? }
// stat = { ";" 
//         | (varlist ~ "=" ~ explist)
//         | functioncall
//         | label
//         | "break"
//         | ("goto" ~ name)
//         | ("do" ~ block ~ "end")
//         | ("while" ~ exp ~ "do" ~ block ~ "end")
//         | ("repeat" ~ block ~ "until" ~ exp)
//         | ("if" ~ exp ~ "then" ~ block ~ ("elseif" ~ exp ~ "then" ~ block)* ~ ("else" ~ block)? ~ "end")
//         | ("for" ~ name ~ "=" ~ exp ~ "," ~ exp ~ ("," ~ exp)? ~ "do" ~ block ~ "end")
//         | ("for" ~ namelist ~ "in" ~ explist ~ "do" ~ block ~ "end")
//         | ("function" ~ funcname ~ funcbody)
//         | ("local" ~ "function" ~ name ~ funcbody)
//         | ("local" ~ attnamelist ~ ("=" ~ explist)?)
//         }
// attnamelist = { name ~ attrib ~ ("," ~ name ~ attrib)* }
// attrib = { ("<" ~ name ~ ">")? }
// retstat = { "return" ~ explist? ~ ";"? }
// label = { "::" ~ name ~ "::" }
// funcname = { name ~ ("." ~ name)* ~ (":" ~ name)? }
// varlist = { var ~ ("," ~ var)* }
// namelist = { name ~ ("," ~ name)* }
// explist = { exp ~ ("," ~ exp)* }
// args = { ("(" ~ explist ~ ")") | tableconstructor | literal_string }
// functiondef = { "function" ~ funcbody }
// funcbody = { "(" ~ parlist? ~ ")" ~ block ~ "end" }
// parlist = { (namelist ~ ("," ~ "...")?) | "..." }
// tableconstructor = { "{" ~ fieldlist? ~ "}" }
// fieldlist = { field ~ (fieldsep ~ field)* ~ fieldsep? }
// field = { ("[" ~ exp ~ "]" ~ "=" ~ exp) | (name ~ "=" ~ exp) | exp }
// fieldsep = { "," | ";" }
// 
// // var = { name | prefixexp ~ "[" ~ exp ~ "]" | prefixexp ~ "." ~ name }
// var_alpha = _{ "[" ~ exp ~ "]" | "." ~ name }
// var_beta = _{ name }
// var = { var_beta ~ var_ }
// var_ = _{ (var_alpha ~ var_)* }
// 
// // exp = { "nil" | "false" | "true" | numeral | literal_string | "..." | functiondef | prefixexp | tableconstructor | exp ~ binop ~ exp | unop ~ exp }
// exp_alpha = _{ binop ~ exp }
// exp_beta = _{ "nil" | "false" | "true" | numeral | literal_string | "..." | functiondef | prefixexp | tableconstructor | unop ~ exp }
// exp = { exp_beta ~ exp_ }
// exp_ = _{ (exp_alpha ~ exp_)* }
// 
// prefixexp = { var | functioncall | "(" ~ exp ~ ")" }
// 
// //functioncall = { prefixexp ~ args | prefixexp ~ ":" ~ name ~ args }
// functioncall_alpha = _{ args | ":" ~ name ~ args }
// functioncall_beta = _{ var | "(" ~ exp ~ ")" }
// functioncall = { functioncall_beta ~ functioncall_ }
// functioncall_ = _{ (functioncall_alpha ~ functioncall_)* }
// 
// binop = { "+" | "-" | "*" | "/" | "//" | "^" | "%" | "&" | "~" | "|" | ">>" | "<<" | ".." | "<" | "<=" | ">" | ">=" | "==" | "~=" | "and" | "or" }
// unop = { "-" | "not" | "#" | "~" }
// 
// numeral = { ASCII_DIGIT+ }
// literal_string = @{ "\"" ~ (ASCII_ALPHANUMERIC | " ")* ~ "\"" }
// name = @{ (ASCII_ALPHA | "_")+ ~ ASCII_ALPHANUMERIC* }

// 5.1
// chunk = { (stat ~ ";"?) ~ (laststat ~ ";"?)? }
// block = { chunk }
// stat = {
//         varlist ~ "=" ~ explist |
//         functioncall |
//         "do" ~ block ~ "end" |
//         "while" ~ exp ~ "do" ~ block ~ "end" |
//         "repeat" ~ block ~ "until" ~ exp |
//         "if" ~ exp ~ "then" ~ block ~ ("elseif" ~ exp ~ "then" ~ block)* ~ ("else" ~ block)? ~ "end" |
//         "for" ~ name ~ "=" ~ exp ~ "," ~ exp ~ ("," ~ exp)? ~ "do" ~ block ~ "end" |
//         "for" ~ namelist ~ "in" ~ explist ~ "do" ~ block ~ "end" |
//         "function" ~ funcname ~ funcbody |
//         "local" ~ "function" ~ name ~ funcbody |
//         "local" ~ namelist ~ ("=" ~ explist)?
// }
// laststat = { "return" ~ explist? | "break" }
// funcname = { name ~ ("." ~ name)* ~ (":" ~ name)? }
// varlist = { var ~ ("," ~ var)* }
// namelist = { name ~ ("," ~ name)* }
// explist = { (exp ~ ",")* ~ exp }
// args = { "(" ~ explist? ~ ")" | tableconstructor | literal_string }
// function = { "function" ~ funcbody }
// funcbody = { "(" ~ parlist? ~ ")" ~ block ~ "end" }
// parlist = { namelist ~ ("," ~ "...")? | "..." }
// tableconstructor = { "{" ~ fieldlist? ~ "}" }
// fieldlist = { field ~ (fieldsep ~ field)* ~ fieldsep? }
// field = { "[" ~ exp ~ "]" ~ "=" ~ exp | name ~ "=" ~ exp | exp }
// fieldsep = { "," | ";" }
// binop = { "+" | "-" | "*" | "/" | "^" | "%" | ".." | 
// 		 "<" | "<=" | ">" | ">=" | "==" | "~=" | 
// 		 "and" | "or" }
// unop = { "-" | "not" | "#" }
// 
// functioncall = { prefixexp ~ args | prefixexp ~ ":" ~ name ~ args }
// 
// // var = { name | prefixexp ~ "[" ~ exp ~ "]" | prefixexp ~ "." ~ name }
// var_alpha = _{ "[" ~ exp ~ "]" | "." ~ name }
// var_beta = _{ name }
// var = { var_beta ~ var_ }
// var_ = { (var_alpha ~ var_)* }
// 
// // exp = { "nil" | "false" | "true" | numeral | literal_string | "..." | function | prefixexp | tableconstructor | exp ~ binop ~ exp | unop ~ exp }
// exp_alpha = _{ binop ~ exp }
// exp_beta = _{ "nil" | "false" | "true" | numeral | literal_string | "..." | function | prefixexp | tableconstructor | unop ~ exp }
// exp = { exp_beta ~ exp_ }
// exp_ = _{ (exp_beta ~ exp_)* }
// 
// 
// // prefixexp = { var | functioncall | "(" ~ exp ~ ")" }
// prefixexp_alpha = _{ args | ":" ~ name ~ args }
// prefixexp_beta = _{ var | "(" ~ exp ~ ")" }
// prefixexp = { prefixexp_beta ~ prefixexp_ }
// prefixexp_ = _{ (prefixexp_alpha ~ prefixexp_)* }
